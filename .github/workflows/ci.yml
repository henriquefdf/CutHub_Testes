name: CI – unit + integration on all OS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [18.x]

    defaults:
      run:
        shell: bash
        working-directory: ./api 

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}

    # ────────────── 1) instala MySQL em cada SO ──────────────
    - name: Install MySQL on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server
        sudo systemctl start mysql
        # define senha root = pwd e cria DB de integração
        mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'pwd';"
        mysql -u root -ppwd -e "CREATE DATABASE cuthub_test;"

    - name: Install MySQL on macOS
      if: runner.os == 'macOS'
      run: |
        brew install mysql@8
        brew services start mysql@8
        # espera subir
        sleep 15
        mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'pwd';"
        mysql -u root -ppwd -e "CREATE DATABASE cuthub_test;"

    - name: Install MySQL on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install mysql --params '/Password=pwd' -y
        # aguarda serviço iniciar
        Start-Sleep -Seconds 20
        "CREATE DATABASE cuthub_test;" | & "C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -uroot -ppwd

    # ────────────── 2) gera envs ──────────────
    - name: Create .env and .env.test
      run: |
        cat <<EOF > .env
        APP_URL=${{ secrets.APP_URL }}
        PORT=${{ secrets.PORT }}
        DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
        AWS_ACCESS_KEY_ID=fake
        AWS_SECRET_ACCESS_KEY=fake
        AWS_BUCKET_REGION=us-east-2
        AWS_BUCKET_NAME=fake
        EMAIL_ACCOUNT=fake
        EMAIL_PASSWORD=fake
        NODE_ENV=development
        EOF

        cat <<EOF > .env.test
        PORT=3031
        DATABASE_URL="mysql://root:pwd@127.0.0.1:3307/cuthub_test"
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        JWT_EXPIRATION=1h
        AWS_ACCESS_KEY_ID=fake
        AWS_SECRET_ACCESS_KEY=fake
        AWS_BUCKET_REGION=us-east-2
        AWS_BUCKET_NAME=fake-bucket
        EMAIL_ACCOUNT=test@example.com
        EMAIL_PASSWORD=test
        NODE_ENV=test
        EOF

    # ────────────── 3) dependências + prisma ──────────────
    - run: npm ci
    - run: npx prisma generate

    # ────────────── 4) tests ──────────────
    - name: Run unit + integration tests
      run: npm run test:all

    # ────────────── 5) cobertura opcional ──────────────
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./api/coverage
