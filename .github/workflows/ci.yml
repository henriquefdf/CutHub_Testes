name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x]   # LTS única em todas as máquinas

    # todos os comandos abaixo executam dentro de ./api
    defaults:
      run:
        working-directory: ./api
        shell: bash

    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Node
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # 3) MySQL 8.0 ouvindo em 3307
      - name: Setup MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "8.0"
          root-password: "pwd"           
          database: "cuthub_test"
          my-cnf: |
            port=3307

      # 4) Constrói o .env e .env.test a partir dos Secrets (mantido)
      - name: Create .env and .env.test file from secrets
        run: |

          rm -f .env .env.test
          
          echo "APP_URL=${{ secrets.APP_URL }}"                             >> .env
          echo "PORT=${{ secrets.PORT }}"                                   >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"                   >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"                       >> .env
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}"               >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"         >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_BUCKET_REGION=${{ secrets.AWS_BUCKET_REGION }}"         >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}"             >> .env
          echo "EMAIL_ACCOUNT=${{ secrets.EMAIL_ACCOUNT }}"                 >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}"               >> .env
          echo "NODE_ENV=node"                                              >> .env

          echo "PORT=3031"                                                  >> .env.test
          echo "DATABASE_URL=mysql://root:pwd@127.0.0.1:3307/cuthub_test"   >> .env.test
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"                       >> .env.test
          echo "JWT_EXPIRATION=1h"                                          >> .env.test
          echo "AWS_ACCESS_KEY_ID=fake"                                     >> .env.test
          echo "AWS_SECRET_ACCESS_KEY=fake"                                 >> .env.test
          echo "AWS_BUCKET_REGION=us-east-2"                                >> .env.test
          echo "AWS_BUCKET_NAME=fake-bucket"                                >> .env.test
          echo "EMAIL_ACCOUNT=test@example.com"                             >> .env.test
          echo "EMAIL_PASSWORD=test"                                        >> .env.test
          echo "NODE_ENV=test"                                              >> .env.test

      # 4.x) Debug (temporário) para inspecionar .env
      - name: "Debug: show .env and .env.test"
        run: |
          echo "Conteúdo de .env:"
          cat .env || echo "(não existe .env)"
          echo "------"
          echo "Conteúdo de .env.test:"
          cat .env.test || echo "(não existe .env.test)"

      # 5) Dependências
      - name: Install dependencies
        run: npm ci

      # 6) Prisma
      - name: Generate Prisma client
        run: npx prisma generate

      # 7) Testes + cobertura
      - name: Run tests with coverage
        run: npm test -- --coverage --runInBand --detectOpenHandles

      # 8) Enviar cobertura ao Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./api/coverage
